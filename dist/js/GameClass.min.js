export class ResultProperty{#e;constructor(e){this.#e=e}get value(){return this.#e}set value(e){"number"==typeof e?this.#e=e:console.error("Value must be a number")}increment(){const e=this.#e;return this.#e+=1,e}}export class Result{#t;#s;#r;#o;#l;#i;#n;constructor(e,t,s){this.#l=e,this.#n=t,this.#i=s,this.reset()}reset(){this.#t=void 0,this.#s=new ResultProperty(1),this.#r=new ResultProperty(0),this.#o=new ResultProperty(0)}get level(){return this.#l}get scrambled(){return this.#n}get displayModeSymbol(){return this.#i}get elapsed(){return this.#s}get erred(){return this.#r}get unconcealed(){return this.#o}get timerDuration(){return this.#t}set timerDuration(e){this.#t=e}get victory(){return 0===this.erred.value&&32===this.unconcealed.value}}export class Action{#a;#c;constructor(e){this.#a=performance.now(),this.#c=e}}export class Game{#h;#u;#l;constructor(e,t){this.#u=e,this.#l=t,this.#h=[]}addAction(e){this.#h.push(e)}clear(){this.#h=[]}dump(){console.log("##################"),console.log("------------------ level"),console.log(this.#l),console.log("------------------ screenshot"),this.#u.forEach((e=>{console.log(e)})),console.log("------------------ actions"),this.#h.forEach((e=>{console.log(e)})),console.log("//////////////////")}}